using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;

namespace HigLabo.OpenAI
{
    /// <summary>
    /// Starting a new project? We recommend trying Responses to take advantage of the latest OpenAI platform features. Compare Chat Completions with Responses.
    /// Creates a model response for the given chat conversation. Learn more in the text generation, vision, and audio guides.
    /// Parameter support can differ depending on the model used to generate the response, particularly for newer reasoning models. Parameters that are only supported for reasoning models are noted below. For the current state of unsupported parameters in reasoning models, refer to the reasoning guide.
    /// <seealso href="https://api.openai.com/v1/chat/completions">https://api.openai.com/v1/chat/completions</seealso>
    /// </summary>
    public partial class ChatCompletionCreateParameter : RestApiParameter, IRestApiParameter
    {
        string IRestApiParameter.HttpMethod { get; } = "POST";
        /// <summary>
        /// A list of messages comprising the conversation so far. Depending on the model you use, different message types (modalities) are supported, like text, images, and audio.
        /// </summary>
        public List<IChatMessage> Messages { get; set; } = new ();
        /// <summary>
        /// Model ID used to generate the response, like gpt-4o or o3. OpenAI offers a wide range of models with different capabilities, performance characteristics, and price points. Refer to the model guide to browse and compare available models.
        /// </summary>
        public string Model { get; set; } = "";
        /// <summary>
        /// Parameters for audio output. Required when audio output is requested with modalities: ["audio"]. Learn more.
        /// </summary>
        public object? Audio { get; set; }
        /// <summary>
        /// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
        /// </summary>
        public double? Frequency_Penalty { get; set; }
        /// <summary>
        /// Modify the likelihood of specified tokens appearing in the completion.
        /// Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
        /// </summary>
        public object? Logit_Bias { get; set; }
        /// <summary>
        /// Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the content of message.
        /// </summary>
        public bool? Logprobs { get; set; }
        /// <summary>
        /// An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and reasoning tokens.
        /// </summary>
        public int? Max_Completion_Tokens { get; set; }
        /// <summary>
        /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.
        /// Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters.
        /// </summary>
        public object? Metadata { get; set; }
        /// <summary>
        /// Output types that you would like the model to generate. Most models are capable of generating text, which is the default:
        /// ["text"]
        /// The gpt-4o-audio-preview model can also be used to generate audio. To request that this model generate both text and audio responses, you can use:
        /// ["text", "audio"]
        /// </summary>
        public object? Modalities { get; set; }
        /// <summary>
        /// How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep n as 1 to minimize costs.
        /// </summary>
        public int? N { get; set; }
        /// <summary>
        /// Whether to enable parallel function calling during tool use.
        /// </summary>
        public bool? Parallel_Tool_Calls { get; set; }
        /// <summary>
        /// Configuration for a Predicted Output, which can greatly improve response times when large parts of the model response are known ahead of time. This is most common when you are regenerating a file with only minor changes to most of the content.
        /// </summary>
        public object? Prediction { get; set; }
        /// <summary>
        /// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
        /// </summary>
        public double? Presence_Penalty { get; set; }
        /// <summary>
        /// Used by OpenAI to cache responses for similar requests to optimize your cache hit rates. Replaces the user field. Learn more.
        /// </summary>
        public string? Prompt_Cache_Key { get; set; }
        /// <summary>
        /// Constrains effort on reasoning for reasoning models. Currently supported values are minimal, low, medium, and high. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
        /// </summary>
        public string? Reasoning_Effort { get; set; }
        /// <summary>
        /// An object specifying the format that the model must output.
        /// Setting to { "type": "json_schema", "json_schema": {...} } enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the Structured Outputs guide.
        /// Setting to { "type": "json_object" } enables the older JSON mode, which ensures the message the model generates is valid JSON. Using json_schema is preferred for models that support it.
        /// </summary>
        public object? Response_Format { get; set; }
        /// <summary>
        /// A stable identifier used to help detect users of your application that may be violating OpenAI's usage policies. The IDs should be a string that uniquely identifies each user. We recommend hashing their username or email address, in order to avoid sending us any identifying information. Learn more.
        /// </summary>
        public string? Safety_Identifier { get; set; }
        /// <summary>
        /// Specifies the processing type used for serving the request.
        /// If set to 'auto', then the request will be processed with the service tier configured in the Project settings. Unless otherwise configured, the Project will use 'default'.
        /// If set to 'default', then the request will be processed with the standard pricing and performance for the selected model.
        /// If set to 'flex' or 'priority', then the request will be processed with the corresponding service tier.
        /// When not set, the default behavior is 'auto'.
        /// When the service_tier parameter is set, the response body will include the service_tier value based on the processing mode actually used to serve the request. This response value may be different from the value set in the parameter.
        /// </summary>
        public string? Service_Tier { get; set; }
        /// <summary>
        /// Not supported with latest reasoning models o3 and o4-mini.
        /// Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
        /// </summary>
        public List<string>? Stop { get; set; }
        /// <summary>
        /// Whether or not to store the output of this chat completion request for use in our model distillation or evals products.
        /// Supports text and image inputs. Note: image inputs over 8MB will be dropped.
        /// </summary>
        public bool? Store { get; set; }
        /// <summary>
        /// If set to true, the model response data will be streamed to the client as it is generated using server-sent events. See the Streaming section below for more information, along with the streaming responses guide for more information on how to handle the streaming events.
        /// </summary>
        public bool? Stream { get; set; }
        /// <summary>
        /// Options for streaming response. Only set this when you set stream: true.
        /// </summary>
        public object? Stream_Options { get; set; }
        /// <summary>
        /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.
        /// </summary>
        public double? Temperature { get; set; }
        /// <summary>
        /// Controls which (if any) tool is called by the model. none means the model will not call any tool and instead generates a message. auto means the model can pick between generating a message or calling one or more tools. required means the model must call one or more tools. Specifying a particular tool via {"type": "function", "function": {"name": "my_function"}} forces the model to call that tool.
        /// none is the default when no tools are present. auto is the default if tools are present.
        /// </summary>
        public string? Tool_Choice { get; set; }
        /// <summary>
        /// A list of tools the model may call. You can provide either custom tools or function tools.
        /// </summary>
        public List<ChatCompletionFunctionTool>? Tools { get; set; }
        /// <summary>
        /// An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. logprobs must be set to true if this parameter is used.
        /// </summary>
        public int? Top_Logprobs { get; set; }
        /// <summary>
        /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
        /// We generally recommend altering this or temperature but not both.
        /// </summary>
        public double? Top_P { get; set; }
        /// <summary>
        /// Constrains the verbosity of the model's response. Lower values will result in more concise responses, while higher values will result in more verbose responses. Currently supported values are low, medium, and high.
        /// </summary>
        public string? Verbosity { get; set; }
        /// <summary>
        /// This tool searches the web for relevant results to use in a response. Learn more about the web search tool.
        /// </summary>
        public WebSearchOption? Web_Search_Options { get; set; }

        string IRestApiParameter.GetApiPath()
        {
            return $"/chat/completions";
        }
        public override object GetRequestBody()
        {
            return new {
            	messages = this.Messages,
            	model = this.Model,
            	audio = this.Audio,
            	frequency_penalty = this.Frequency_Penalty,
            	logit_bias = this.Logit_Bias,
            	logprobs = this.Logprobs,
            	max_completion_tokens = this.Max_Completion_Tokens,
            	metadata = this.Metadata,
            	modalities = this.Modalities,
            	n = this.N,
            	parallel_tool_calls = this.Parallel_Tool_Calls,
            	prediction = this.Prediction,
            	presence_penalty = this.Presence_Penalty,
            	prompt_cache_key = this.Prompt_Cache_Key,
            	reasoning_effort = this.Reasoning_Effort,
            	response_format = this.Response_Format,
            	safety_identifier = this.Safety_Identifier,
            	service_tier = this.Service_Tier,
            	stop = this.Stop,
            	store = this.Store,
            	stream = this.Stream,
            	stream_options = this.Stream_Options,
            	temperature = this.Temperature,
            	tool_choice = this.Tool_Choice,
            	tools = this.Tools,
            	top_logprobs = this.Top_Logprobs,
            	top_p = this.Top_P,
            	verbosity = this.Verbosity,
            	web_search_options = this.Web_Search_Options,
            };
        }
    }
    public partial class ChatCompletionCreateResponse : ChatCompletionObjectResponse
    {
    }
    public partial class OpenAIClient
    {
        public async ValueTask<ChatCompletionCreateResponse> ChatCompletionCreateAsync(List<IChatMessage> messages, string model)
        {
            var p = new ChatCompletionCreateParameter();
            p.Messages = messages;
            p.Model = model;
            return await this.SendJsonAsync<ChatCompletionCreateParameter, ChatCompletionCreateResponse>(p, System.Threading.CancellationToken.None);
        }
        public async ValueTask<ChatCompletionCreateResponse> ChatCompletionCreateAsync(List<IChatMessage> messages, string model, CancellationToken cancellationToken)
        {
            var p = new ChatCompletionCreateParameter();
            p.Messages = messages;
            p.Model = model;
            p.Stream = null;
            return await this.SendJsonAsync<ChatCompletionCreateParameter, ChatCompletionCreateResponse>(p, cancellationToken);
        }
        public async ValueTask<ChatCompletionCreateResponse> ChatCompletionCreateAsync(ChatCompletionCreateParameter parameter)
        {
            parameter.Stream = null;
            return await this.SendJsonAsync<ChatCompletionCreateParameter, ChatCompletionCreateResponse>(parameter, System.Threading.CancellationToken.None);
        }
        public async ValueTask<ChatCompletionCreateResponse> ChatCompletionCreateAsync(ChatCompletionCreateParameter parameter, CancellationToken cancellationToken)
        {
            parameter.Stream = null;
            return await this.SendJsonAsync<ChatCompletionCreateParameter, ChatCompletionCreateResponse>(parameter, cancellationToken);
        }
        public async IAsyncEnumerable<string> ChatCompletionCreateStreamAsync(List<IChatMessage> messages, string model)
        {
            var p = new ChatCompletionCreateParameter();
            p.Messages = messages;
            p.Model = model;
            p.Stream = true;
            await foreach (var item in this.GetStreamAsync(p, null, System.Threading.CancellationToken.None))
            {
                yield return item;
            }
        }
        public async IAsyncEnumerable<string> ChatCompletionCreateStreamAsync(List<IChatMessage> messages, string model, [EnumeratorCancellation] CancellationToken cancellationToken)
        {
            var p = new ChatCompletionCreateParameter();
            p.Messages = messages;
            p.Model = model;
            p.Stream = true;
            await foreach (var item in this.GetStreamAsync(p, null, cancellationToken))
            {
                yield return item;
            }
        }
        public async IAsyncEnumerable<string> ChatCompletionCreateStreamAsync(ChatCompletionCreateParameter parameter)
        {
            parameter.Stream = true;
            await foreach (var item in this.GetStreamAsync(parameter, null, System.Threading.CancellationToken.None))
            {
                yield return item;
            }
        }
        public async IAsyncEnumerable<string> ChatCompletionCreateStreamAsync(ChatCompletionCreateParameter parameter, ChatCompletionStreamResult result)
        {
            parameter.Stream = true;
            await foreach (var item in this.GetStreamAsync(parameter, result, System.Threading.CancellationToken.None))
            {
                yield return item;
            }
        }
        public async IAsyncEnumerable<string> ChatCompletionCreateStreamAsync(ChatCompletionCreateParameter parameter, ChatCompletionStreamResult result, [EnumeratorCancellation] CancellationToken cancellationToken)
        {
            parameter.Stream = true;
            await foreach (var item in this.GetStreamAsync(parameter, result, cancellationToken))
            {
                yield return item;
            }
        }
    }
}
