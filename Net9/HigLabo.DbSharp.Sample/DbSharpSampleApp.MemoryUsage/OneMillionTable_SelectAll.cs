//Generated by DbSharpApplication.
//https://github.com/higty/higlabo/tree/master/Net7
using System.Data;
using System.Data.Common;
using System.Text;
using HigLabo.Core;
using HigLabo.Data;
using HigLabo.DbSharp;

namespace HigLabo.DbSharpSample.SqlServer
{
    public partial class OneMillionTable_SelectAll : StoredProcedureWithResultSet<OneMillionTable_SelectAll.ResultSet>
    {
        public partial class ResultSet : StoredProcedureResultSet
        {
            private Int64? _Id;
            private String? _Text1 = null;
            private String? _Text2 = null;
            private String? _Text3 = null;

            public Int64? Id
            {
                get
                {
                    return _Id;
                }
                set
                {
                    _Id = value;
                }
            }
            public String? Text1
            {
                get
                {
                    return _Text1;
                }
                set
                {
                    _Text1 = value;
                }
            }
            public String? Text2
            {
                get
                {
                    return _Text2;
                }
                set
                {
                    _Text2 = value;
                }
            }
            public String? Text3
            {
                get
                {
                    return _Text3;
                }
                set
                {
                    _Text3 = value;
                }
            }

            public ResultSet()
            {
            }
            public ResultSet(ResultSet resultSet)
            {
                var r = resultSet;
                Id = r.Id;
                Text1 = r.Text1;
                Text2 = r.Text2;
                Text3 = r.Text3;
            }
            internal ResultSet(OneMillionTable_SelectAll storedProcedure)
            {
                this._StoredProcedureResultSet_StoredProcedure = storedProcedure;
            }

            public override String ToString()
            {
                var sb = new StringBuilder(64);
                sb.AppendLine("<OneMillionTable_SelectAll.ResultSet>");
                sb.AppendFormat("Id={0}", this.Id); sb.AppendLine();
                sb.AppendFormat("Text1={0}", this.Text1); sb.AppendLine();
                sb.AppendFormat("Text2={0}", this.Text2); sb.AppendLine();
                sb.AppendFormat("Text3={0}", this.Text3); sb.AppendLine();
                return sb.ToString();
            }
        }

        public const String Name = "OneMillionTable_SelectAll";

        public String DatabaseKey
        {
            get
            {
                return ((IDatabaseKey)this).DatabaseKey;
            }
            set
            {
                ((IDatabaseKey)this).DatabaseKey = value;
            }
        }

        public OneMillionTable_SelectAll()
        {
            ((IDatabaseKey)this).DatabaseKey = "DatabaseKey";
            ConstructorExecuted();
        }

        public override String GetStoredProcedureName()
        {
            return OneMillionTable_SelectAll.Name;
        }
        partial void ConstructorExecuted();
        public override DbCommand CreateCommand(Database database)
        {
            var db = database;
            var cm = db.CreateCommand();
            cm.CommandType = CommandType.StoredProcedure;
            cm.CommandText = this.GetStoredProcedureName();
            return cm;
        }
        protected override void SetOutputParameterValue(DbCommand command)
        {
        }
        public override OneMillionTable_SelectAll.ResultSet CreateResultSet()
        {
            return new ResultSet(this);
        }
        protected override void SetResultSet(OneMillionTable_SelectAll.ResultSet resultSet, IDataReader reader)
        {
            var r = resultSet;
            Int32 index = -1;
            try
            {
                index += 1; if (reader[index] != DBNull.Value) r.Id = reader.GetInt64(index);
                index += 1; if (reader[index] != DBNull.Value) r.Text1 = reader[index] as String;
                index += 1; if (reader[index] != DBNull.Value) r.Text2 = reader[index] as String;
                index += 1; if (reader[index] != DBNull.Value) r.Text3 = reader[index] as String;
            }
            catch (Exception ex)
            {
                throw new StoredProcedureSchemaMismatchedException(this, index, ex);
            }
        }
        public override String ToString()
        {
            var sb = new StringBuilder(32);
            sb.AppendLine("<OneMillionTable_SelectAll>");
            return sb.ToString();
        }
    }
}
