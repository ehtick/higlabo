@{
    var startValue = this.StartDate?.ToString(this.DateTimeFormat) ?? "";
    var endValue = this.EndDate?.ToString(this.DateTimeFormat) ?? "";
}
<InputFieldPanel Layout="@Layout" PanelType="date-duration" Name="@Name" Text="@Text" FieldNameVisible="@FieldNameVisible" ValidateResult="@ValidateResult">
    <input type="text" class="textbox date" value="@startValue"
           @onchange="e => this.OnStartDateChanged(e.Value?.ToString()?.ToDateOnly())"
           @onclick="e => this.SelectDateCalendarPanelVisible = true"
           @oninput="e => this.StartDate_Input(e)"
           @onblur="async e => await this.StartDate_Blur(e)" />
    @if (this.Layout == InputFieldPanelLayout.Default || this.StartDate.HasValue || this.EndDate.HasValue)
    {
        <span class="separator">-</span>
    }
    <input type="text" class="textbox date" value="@endValue"
           @onchange="e => this.OnEndDateChanged(e.Value?.ToString()?.ToDateOnly())"
           @onclick="e => this.SelectDateCalendarPanelVisible = true"
           @oninput="e => this.EndDate_Input(e)"
           @onblur="async e => await this.EndDate_Blur(e)" />
    <div class="select-container-panel">
        @if (SelectDateCalendarPanelVisible)
        {
            <SelectDateDurationCalendarPanel DateSelected="async v => await this.DateSelected_Callback(v)"
                                             OnClosed="() => this.SelectDateCalendarPanelVisible = false"></SelectDateDurationCalendarPanel>
        }
    </div>
</InputFieldPanel>
