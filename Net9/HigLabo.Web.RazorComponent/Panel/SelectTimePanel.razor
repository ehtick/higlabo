@{
    var workStartHour = this.StartHour;
    var workEndHour = this.EndHour;
}

<div class="select-time-panel">
    <div class="header-panel">
        <CheckboxPanel Value="this.DisplayAllTime" ValueChanged="v => this.DisplayAllTime = v">@T.Text.DisplayAll</CheckboxPanel>
    </div>
        <div class="content-panel">
        <div class="start-time-panel">
            <table>
                @for (int hour = 0; hour < this.MaxHour; hour++)
                {
                    if (this.DisplayAllTime == false && (hour < workStartHour || workEndHour < hour)) { continue; }
                    <tr class="hour-minute-panel">
                        <td class="hour-panel">@hour.ToString("00")</td>
                        @foreach (var minuteSetting in this.MinuteList)
                        {
                            if (this.DisplayAllTime == false && minuteSetting.IsDisplay == false) { continue; }

                            var minute = minuteSetting.Minute;
                            var ts = new TimeSpan(hour, minute, 0);
                            <td class="minute-panel" @onclick="async e => await this.StartTimePanel_Click(ts)">@minute.ToString("00")</td>
                        }
                    </tr>
                }
            </table>
        </div>
        @if (this.SelectEndTimeMode == SelectEndTimeMode.EndTime)
        {
            <div class="end-time-panel">
                <table>
                    @for (int hour = 0; hour < 24; hour++)
                    {
                        if (this.DisplayAllTime == false && (hour < workStartHour || workEndHour < hour)) { continue; }
                        <tr class="hour-minute-panel">
                            <td class="hour-panel">@hour.ToString("00")</td>
                            @foreach (var minuteSetting in this.MinuteList)
                            {
                                if (this.DisplayAllTime == false && minuteSetting.IsDisplay == false) { continue; }

                                var minute = minuteSetting.Minute;
                                var ts = new TimeSpan(hour, minute, 0);
                                <td class="minute-panel" @onclick="async e => await this.EndTimePanel_Click(ts)">@minute.ToString("00")</td>
                            }
                        </tr>
                    }
                </table>
            </div>
        }
        @if (this.SelectEndTimeMode == SelectEndTimeMode.Duration)
        {
            <div class="select-duration-panel">
                @foreach (var minuteSetting in this.DurationList)
                {
                    if (this.DisplayAllTime == false && minuteSetting.IsDisplay == false) { continue; }

                    var minute = minuteSetting.Minute;
                    var ts = TimeSpan.FromMinutes(minute);
                    @if (minute < 60)
                    {
                        <div class="duration-minute-panel" @onclick="async e => await DurationPanel_Click(minute)">
                            @String.Format("{0}{1}", minute, T.Text.Minute)
                        </div>
                    }
                    else
                    {
                        if (ts.Minutes == 0)
                        {
                            <div class="duration-minute-panel" @onclick="async e => await DurationPanel_Click(minute)">
                                @String.Format("{0}{1}", ts.Hours, T.Text.Hour)
                            </div>
                        }
                        else
                        {
                            <div class="duration-minute-panel" @onclick="async e => await DurationPanel_Click(minute)">
                                @String.Format("{0}{1}{2}{3}", ts.Hours, T.Text.Hour, ts.Minutes, T.Text.Minute)
                            </div>
                        }
                    }
                }
            </div>
        }
    </div>
    <div class="footer-panel">
        <button class="button radius-button" @onclick="async e => await CloseButton_Click()">@T.Text.Close</button>
    </div>
</div>


