@typeparam TItem
@typeparam TFilterItem

<div class="select-record-panel">
	@if (this.State.SearchContainerPanelVisible == true)
	{
		<div class="search-container-panel">
			<input type="text" class="textbox" placeholder="@T.Text.Search"
				   @bind="this.State.SearchText" @bind:event="oninput" @onkeydown="e => SearchTextbox_Keydown(e)" />
			<div class="flex-right-panel">
				<button class="button radius-button" @onclick="e => SearchButton_Click(e)" @onclick:stopPropagation="true">@T.Text.Search</button>
				<button class="button radius-button" @onclick="e => this.State.OnClosed()">@T.Text.Close</button>
			</div>
		</div>
	}
	<div class="record-list-panel">
		@for (int i = 0; i < this.State.RecordList.Count; i++)
		{
			var cName = "record-panel";
			if (i == this.State.RecordIndex)
			{
				cName += " current";
			}
			var r = this.State.RecordList[i];
			if (this.ItemTemplate == null)
			{
				if (r == null)
				{
					<div class="@cName" @onclick="e => RecordPanel_Click(r)">@T.Text.Clear</div>
				}
				else
				{
					<div class="@cName" @onclick="e => RecordPanel_Click(r)">@r.ToString()</div>
				}
			}
			else
			{
				<div class="@cName" @onclick="e => RecordPanel_Click(r)">@this.ItemTemplate(r)</div>
			}
		}
	</div>
</div>

