@rendermode InteractiveServer


<InputFieldPanel_Record Text="EndTime type" @bind-Record="this.SelectEndTimeMode" SearchContainerPanelVisible="false"
    OnRecordListLoading="(RecordListLoadingContext<SelectEndTimeMode?> context) => context.RecordList.AddEnumList<SelectEndTimeMode>()">
    <ItemTemplate Context="record">
        @if (record == null)
        {
            <span>Please select by click</span>
        }
        else
        {
            <span>@T.Text.Get(record.Value)</span>
        }
    </ItemTemplate>
</InputFieldPanel_Record>

<InputFieldPanel_Record Text="EndTime type" Layout="InputFieldPanelLayout.Flex" @bind-Record="this.SelectEndTimeMode"
    OnRecordListLoading="(RecordListLoadingContext<SelectEndTimeMode?> context) => context.RecordList.AddEnumList<SelectEndTimeMode>()">
    <ItemTemplate Context="record">
        @if (record == null)
        {
            <span>Not selected</span>
        }
        else
        {
            <div>@record?.ToStringFromEnum()</div>
        }
    </ItemTemplate>
    <SelectItemTemplate Context="record">
        @if (record == null)
        {
            <span>Clear</span>
        }
        else
        {
            <span>@T.Text.Get(record.Value)</span>
        }
    </SelectItemTemplate>
</InputFieldPanel_Record>

<InputFieldPanel_Record Text="Person in charge" @bind-Record="this.SelectedUser"
    OnRecordListLoading="(RecordListLoadingContext<UserRecord> context) => LoadingRecordList(context)">
    <ItemTemplate>
        @if (this.SelectedUser == null)
        {
            <div>Select user</div>
        }
        else
        {
            <div style="padding: 4px 8px;">
                <div class="name">@this.SelectedUser.Name</div>
                <span class="age">@string.Format("{0}才", this.SelectedUser.Age)</span>
            </div>
        }
    </ItemTemplate>
    <SelectItemTemplate Context="record">
        <span>@record.Name</span>
    </SelectItemTemplate>
</InputFieldPanel_Record>

<hr />

<InputFieldPanel_RecordList Text="User list" AddRecordMode="AddRecordMode.Select" RecordList="this.SelectedUserList" TItem="UserRecord" 
    OnRecordListLoading="context => LoadingRecordList(context)">
    <ChildContent>
        @foreach (var item in this.SelectedUserList)
        {
            <div class="record-panel user-record-panel" tabindex="0" style="height: 40px;">
                <span class="name">@item.Name</span>
                <img class="delete-icon" src="@HigLabo.Web.Internal.UrlInfo.GetIconUrl(Higlabo__icon.Delete__svg)" @onclick="e => DeleteUser(item)" tabindex="0" />
            </div>
        }
    </ChildContent>
    <SelectItemTemplate Context="record">
        <div class="select-user-record-panel">
            <span class="name">@record.Name</span>
            <span class="age">@string.Format("{0}才", record.Age)</span>
        </div>
    </SelectItemTemplate>
</InputFieldPanel_RecordList>

<InputFieldPanel_RecordList Text="User list" RecordList="this.SelectedUserList" OnRecordAdded="AddUser" TItem="UserRecord">
    <ChildContent>
        @{
            var sortIndex = 0;
            foreach (var rUser in this.SelectedUserList)
            {
                <ToggleRecordPanel HeaderText="@rUser.Name" AllowDelete="true" Deleted="e => this.DeleteUser(rUser)"
                                   AllowSort="true" SortGroup="SortGroup" SortIndex="@sortIndex" OnItemDropped="OnUserDropped">
                    <ContentPanel>
                        <div class="permission-list-panel">
                            <InputFieldPanel Layout="InputFieldPanelLayout.Flex" Text="Name">
                                <input type="text" class="textbox" @bind-value="rUser.Name" />
                            </InputFieldPanel>
                            <InputFieldPanel Layout="InputFieldPanelLayout.Flex" Text="Age">
                                <input type="text" class="textbox" @bind-value="rUser.Age" />
                            </InputFieldPanel>
                            <CheckboxPanel @bind-Value="@rUser.IsAdministrator">Admin</CheckboxPanel>
                        </div>
                    </ContentPanel>
                </ToggleRecordPanel>
                sortIndex++;
            }
        }
    </ChildContent>
    <SelectItemTemplate Context="record">
        <span>@record.Name</span>
    </SelectItemTemplate>
</InputFieldPanel_RecordList>

<InputFieldPanel_RecordList Text="User list" RecordList="this.SelectedUserList" OnRecordAdded="AddUser" TItem="UserRecord">
    @foreach (var item in this.SelectedUserList)
    {
        <div class="record-panel user-record-panel" tabindex="0">
            <span class="name">@item.Name</span>
            <span class="age">@item.Age</span>
            <img class="delete-icon" src="@HigLabo.Web.Internal.UrlInfo.GetIconUrl(Higlabo__icon.Delete__svg)" @onclick="e => DeleteUser(item)" tabindex="0" />
        </div>
    }
</InputFieldPanel_RecordList>


@code {
    public class UserRecord
    {
        public ToggleState ToggleState { get; set; } = ToggleState.Hidden;
        public Guid UserId { get; set; } = Guid.NewGuid();
        public string Name { get; set; } = "";
        public int Age { get; set; } = 22;
        public bool IsAdministrator { get; set; } = false;
    }
    [Parameter]
    public bool Selected { get; set; } = false;
    [Parameter]
    public SelectEndTimeMode? SelectEndTimeMode { get; set; } 

    [Parameter]
    public FileAccess FileAccess { get; set; } = FileAccess.Read;
    [Parameter]
    public bool SelectDateCalendarPanelVisible { get; set; } = false;
    [Parameter]
    public bool SelectDateDurationCalendarPanelVisible { get; set; } = false;

    [Parameter]
    public UserRecord SelectedUser { get; set; } = new() { Name = "Higty", Age = 22 };
    [Parameter]
    public List<UserRecord> SelectedUserList { get; init; } = new();
    [Parameter]
    public SortGroup SortGroup { get; set; } = new();

    private void AddUser()
    {
        var r = new UserRecord();
        r.Name = "Higty" + DateTime.Now.Second;
        r.Age = DateTime.Now.Second;
        this.SelectedUserList.Add(r);
    }
    private void DeleteUser(UserRecord record)
    {
        this.SelectedUserList.Remove(record);
    }
    private void LoadingRecordList(RecordListLoadingContext<UserRecord> context)
    {
        var l = new List<UserRecord>();
        l.Clear();
        for (int i = 0; i < 20; i++)
        {
            var r = new UserRecord();
            r.Name = "User" + i; 
            r.Age = i;
            l.Add(r);
        }

        context.RecordList.Clear();
        if (context.SearchText.IsNullOrEmpty())
        {
            context.RecordList.AddRange(l);
        }
        else
        {
            context.RecordList.AddRange(l.FindAll(el => el.Name.Contains(context.SearchText)));
        }
    }
    private void OnUserDropped(ItemDroppedEventArgs e)
    {
        SortGroup.Sort(this.SelectedUserList, e);
    }


    private void PersonInChargeSelected(UserRecord record)
    {
        this.SelectedUser = record;
    }
    private void RecordSelected(UserRecord record)
    {
        this.SelectedUserList.Add(record);
    }
}